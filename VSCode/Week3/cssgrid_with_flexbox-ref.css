/* Global settings */

/* Zeroing out margins/padding */
* {
    padding: 0;
    margin: 0;
  }
  
  /** 
   * Once everything is zeroed out, you apply styles on top of that base - like a layer cake
   * It's usually a good idea to set initial font declarations for the entire document on body
   */ 
  body {
    font-family: 'Lato', sans-serif;
    font-size: 16px;
    margin: 50px;
  }
  
  /** 
   * Set up font family and sizing rhythm for the entire document in the global area
   */
  h1, h2, h3, h4, h5, h6 {
    font-family: 'Oswald', sans-serif;
  }
  
  h1 {
    font-size: 48px;
  }
  
  h2 {
    font-size: 36px;
    margin: 15px 0;
  }
  
  h3 {
    font-size: 24px;
  }
  
  h4 {
    font-size: 16px;
  }
  
  hr {
    margin: 25px 0;
  }
  
  /** 
   * #############################
   * FLEXBOX LAYOUT (using flexbox as a grid)
   *
   * Big top-level container showing three items side-by-side
   * flex-wrap on the container and width on the children does the job of making flexbox into a grid (if you want to play it that way)
   * Once flex-wrap is set to `wrap`, it allows flexbox containers to look at their children objectively 
   * This makes the browser use the box model (100% width per row) instead of the flexbox algorithm (all objects in a row no matter what)
   *
   * Now you're asking - why would you ever do this with CSS grid around? 
   * Couple reasons - one is that you need Internet Explorer coverage. IE doesn't support CSS Grid
   * Another is that flex grids break in creative ways, sometimes easier to think in rows of 100% width instead of columns
   * That last reason is pretty weak but hey, it comes up
   */
  .flexbox-setup {
    display: flex;
    flex-wrap: wrap; 
  }
  
  /*  */
  .box {
    align-items: center;
    border-left: 5px solid lightgreen;
    display: flex;
    height: 100px;
    margin: 15px 0;
    padding-left: 15px;
    width: 30%;
  }
  
  /** 
   * #############################
   * GRID LAYOUT 
   *
   * We're basically achieving a very similar layout using just CSS grid
   * Notice how much easier this is: the algorithm for CSS Grid is more intelligent
   * You can put n `grid-box` elements in the `grid-setup` container and get good results
   * This called the implicit grid idea - you just tell the browser how many columns you need and it figures out the rest
   * This is SUPER useful once you get into real websites, where variable number of elements will get thrown at you from an API
   * Now you can just set a couple of properties on the parent container and however many children come, you're covered
   */
  .grid-setup {
    display: grid;
    grid-gap: 25px;
    grid-template-columns: 1fr 1fr 1fr;
  }
  
  .grid-box {
    border-top: 10px solid pink;
    padding-top: 20px;
    text-align: center; /* ????? - this just moves the text, nothing with the layout position */
  }
  
  /** 
   * #############################
   * GRID + FLEXBOX LAYOUT 
   *
   * This is kinda the holy grail if you ask me
   * Flexbox as a grid is workable but clunky. Grid is better for that job.
   * But inside of the individual grid children, you often need to do small scale layouts, like this example
   * This is where flexbox shines. It can easily get a couple objects to sit side-by-side with just a `display: flex` on the parent
   * But you have to get comfortable with the idea of certain elements playing dual roles (as a grid child and a flex parent)
   * This is tough for beginners but it's the way to do it if you ask me.
   * Example below shows this exact scenario, where you want a grid structure with flexboxes inside of it.
   * With flexbox, it's harder because you'd have to set widths. CSS Grid covers the children without widths. But it's still not perfect. 
   * Flexbox's algorithm forces the idea of all children into one row, CSS Grid is more flexible (ironically) - it will not deform children with set widths
   * Instead, children will spill out of the containers and have overflow, especially along the X-axis
   * Play with this code a bit - notice how big the pumpkin graphic is: we scale that down by controling the <img> sizing
   * If we don't control the image, the grid's columns will blow out - see how the grid responds when you break it
   */
  .grid-flex-setup {
    display: grid;
    grid-gap: 25px;
    grid-template-columns: 1fr 1fr 1fr;
  }
  
  .grid-flex-box {
    border-left: 10px solid #666;
    display: flex;
  }
  
  /* See how this overwrites the style just above? That's typically how you apply psuedo classes like nth-child */
  /* Cool tool to learn nth-child pseudo selector patterns: https://css-tricks.com/examples/nth-child-tester/ */
  .grid-flex-box:nth-child(5) {
    border-left: 10px solid limegreen;
  }
  
  .grid-flex-box img {
    height: 200px;
    width: 200px;
  }
  
  .user-info-container p,
  .user-info-container h3 {
    margin: 15px;
  }